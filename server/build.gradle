plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm'
    id 'org.jetbrains.kotlin.plugin.serialization'
    id 'application'
    id 'distribution'
}

def kotlinxSerializationVersion = getProperties()["kotlinx.serialization.version"]
def ktorVersion = getProperties()["ktor.version"]
def kotlinWrappersSuffix = getProperties()["kotlin.wrappers.suffix"]

def logbackVersion =  getProperties()["logback.version"]
def exposedVersion =  getProperties()["exposed.version"]
def h2Version =  getProperties()["h2.version"]

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    implementation "io.ktor:ktor-server-netty:$ktorVersion"
    implementation "io.ktor:ktor-client-apache:$ktorVersion"
    implementation "io.ktor:ktor-jackson:$ktorVersion"
    implementation "io.ktor:ktor-html-builder:$ktorVersion"
    implementation "ch.qos.logback:logback-classic:$logbackVersion"
    implementation "org.jetbrains:kotlin-css:1.0.0-$kotlinWrappersSuffix"
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$kotlinxSerializationVersion"
    implementation "org.jetbrains.exposed:exposed-core:$exposedVersion"
    implementation "org.jetbrains.exposed:exposed-dao:$exposedVersion"
    implementation "org.jetbrains.exposed:exposed-jdbc:$exposedVersion"
    implementation "com.h2database:h2:$h2Version"

    implementation project(":shared")

    testImplementation "org.jetbrains.kotlin:kotlin-test"
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit"
}

application {
    mainClassName = 'io.ktor.server.netty.EngineMain'
}

processResources {
    from project(":client").tasks.getByName('browserProductionWebpack').destinationDirectory

    //todo: bug?
    dependsOn project(":client").tasks.getByName('browserProductionWebpack')
}


////// Dev server

task devServerResources(type: Copy) {
    destinationDir = new File(project.buildDir, "dev-resources")
    from sourceSets.main.resources
    filter { line -> line.replaceAll('port = 8080', 'port = 8081') }
}

task prepareDevServer {
    dependsOn "compileKotlin"
    dependsOn "devServerResources"
}

task devServer(type: JavaExec) {
    dependsOn "prepareDevServer"

    classpath = project.files(
            configurations.runtimeClasspath,
            new File(project.buildDir, "classes/kotlin/main"),
            new File(project.buildDir, "dev-resources")
    )
    main = 'io.ktor.server.netty.EngineMain'
}

///////////////